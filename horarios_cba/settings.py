"""
Django settings for horarios_cba project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
import environ
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-t#7v#9$o-yderj@pa&vdns0rs^k8@lf!yhwvzm_=2hhm-%7b_9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # Desactiva el modo debug para ir a producción

# Para permitir el acceso desde cualquier sitio por el momento dejarlo asi ya que esto no se hace en producción
ALLOWED_HOSTS = ['*']

env = environ.Env()  # Crea un objeto de tipo Env
environ.Env.read_env()  # Lee el archivo .env


# Configuración del backend de correo electrónico
# En este caso, usamos el backend de SMTP de Django
# para enviar correos electrónicos a través del servidor de correo Gmail

# Clase de backend de correo electrónico a usar
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# Configuración del servidor de correo Gmail
# Dirección del servidor de correo
EMAIL_HOST = 'smtp.gmail.com'
# Puerto en el que se encuentra el servidor de correo
EMAIL_PORT = 587
# Indica si se debe usar TLS para conectarse al servidor de correo
EMAIL_USE_TLS = True
# Nombre de usuario con el que se autentica en el servidor de correo
EMAIL_HOST_USER = 'proyectohorarioscba@gmail.com'
# Contraseña del usuario en el servidor de correo
EMAIL_HOST_PASSWORD = 'aabt rszp dewb yymf'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',  # Registro de Django Rest Framework
    'corsheaders',  # Registro de Django Cors Headers
    'coreapi',  # Registro de CoreAPI
    'api',  # Registro de la API
    'channels',  # Registro de Channels
]

ASGI_APPLICATION = 'horarios_cba.asgi.application'  # Registro de ASGI

# Configuración de Channels
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',  # Lector de canales en memoria
    },
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # Middleware para servir archivos estáticos
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Middleware para CORS
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'horarios_cba.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'horarios_cba.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases


# Configuración de la base de datos
# Esta sección define los parámetros para conectar a la base de datos.
# Los parámetros se especifican aquí directamente para la conexión por defecto.
# Para configurar conexiones adicionales, se debe agregar un nuevo diccionario
# a la lista "DATABASES".


DATABASES = {
    # Configuración de la conexión por defecto
    'default': {
        # Motor de base de datos a utilizar.
        # En este caso, se utiliza PostgreSQL
        'ENGINE': 'django.db.backends.postgresql',
        # Nombre de la base de datos a utilizar.
        'NAME': 'cba_horarios',
        # Nombre de usuario para la conexión a la base de datos.
        'USER': 'postgres',
        # Contraseña para la conexión a la base de datos.
        'PASSWORD': 'William2010',
        # Dirección del servidor de la base de datos.
        'HOST': 'localhost',
        # Puerto en el cual se encuentra el servidor de la base de datos.
        'PORT': '5432',
    }
}



# Configuración de la base de datos
# Esta sección define los parámetros para conectar a la base de datos.
# Los parámetros se obtienen de la variable de entorno DATABASE_URL.
# La función "dj_database_url.parse" analiza la URL de la base de datos y devuelve
# un diccionario con los parámetros necesarios para configurar la conexión.

"""
DATABASES = {
    # Configuración predeterminada
    'default': dj_database_url.parse(env('DATABASE_URL'))
    # 'default': dj_database_url.parse(env('DATABASE_URL'),  # URL de la base de datos
    #                                   conn_max_age=600,   # Tiempo de vida de las conexiones
    #                                   conn_health_checks=True)  # Chequeo de conexiones
}
"""

# Configuración de la conexión a la base de datos
# - 'default': Configuración predeterminada
# - 'dj_database_url.parse': Analiza la URL de la base de datos y devuelve un
#   diccionario con los parámetros necesarios para configurar la conexión.
# - env('DATABASE_URL'): Obtiene la URL de la base de datos de la variable de
#   entorno DATABASE_URL.


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Bogota' # Zona horaria de Colombia

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'  # URL de la carpeta 'static'
STATIC_ROOT = BASE_DIR / 'staticfiles'  # Ruta de la carpeta 'staticfiles'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),  # Ruta de la carpeta 'static'
]

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
# Permitir acceso desde cualquier sitio lo dejamos asi por el momento porque eso no se hace en producción
CORS_ORIGIN_ALLOW_ALL = True

MEDIA_URL = '/media/'  # URL de la carpeta 'media'
MEDIA_ROOT = BASE_DIR / 'media'  # Ruta de la carpeta 'media'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
